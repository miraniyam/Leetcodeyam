import math

class Solution:
    def bulbSwitch(self, n: int) -> int:
        return int(math.sqrt(n))

# ith round => i, i*2, i*3 번째 bulb의 상태를 바꿈 (켜져 있음 끄고, 꺼져 있음 킴)
# 전구가 켜져있으려면, 상태가 홀수 번 바뀌어야 함 (켜짐->꺼짐->켜짐)
# 상태가 홀수 번 바뀌는 전구의 갯수를 찾으면 됨~

# 상태가 홀수 번 바뀌는 전구는 어떤 전구들일까..
# ith round 마다 i, i*2, .. 전구들을 바꾸는 규칙을 생각해보면
# 약수가 홀수개이면 되는데, 약수가 홀수개이려면 "완전제곱수" 이여야 함
# 완전제곱수 : 어떤 자연수의 제곱이 되는 수

# 그럼.. 전구가 16개일 때, 1~16사이의 완전 제곱수는 몇개일까?
# 1*1 = 1, 2*2 = 4, 3*3 = 9, 4*4 = 16 => 4개임
# y=x^2인 그래프로 생각해보면,, y=[1, 16]이면 x는 [sqrt(1), sqrt(16)]이지여?
# 그럼 x의 갯수는? sqrt(16) - sqrt(1) + 1 = 4 - 1 + 1 = 4
# 변수로 대입해보면.. sqrt(n) - sqrt(1) + 1 = sqrt(n)
# 그래서 정답은 sqrt(n)이 되겠습니다.
        